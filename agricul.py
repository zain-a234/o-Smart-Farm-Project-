# -*- coding: utf-8 -*-
"""agricul.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17t0cZHGkQX7K9fgqx4OYoS_AyibFpEtM
"""

! pip install -q kaggle
! mkdir /root/.kaggle
! cp /content/kaggle.json ~/.kaggle
! chmod 600 ~/.kaggle/kaggle.json
! kaggle datasets download -d suraj520/agricultural-data-for-rajasthan-india-2018-2019

import zipfile
data_path='/content/agricultural-data-for-rajasthan-india-2018-2019.zip'
with zipfile.ZipFile(data_path,'r') as az:
  az.extractall('/content/data')

import pandas as pd

soil_data=pd.read_csv('/content/data/soil_analysis_data.csv')
water_data=pd.read_csv('/content/data/water_usage_data.csv')

soil_data.head()

soil_data=soil_data.drop('District', axis=1)

soil_data.info()

soil_data['Soil Type'].unique()

from sklearn.preprocessing import LabelEncoder
label_encoder = LabelEncoder()
soil_data['Soil Type'] = label_encoder.fit_transform(soil_data['Soil Type'])

from sklearn.preprocessing import MinMaxScaler

scaler = MinMaxScaler()
scaled_features = scaler.fit_transform(soil_data[['pH Level', 'Organic Matter (%)', 'Nitrogen Content (kg/ha)',
                                            'Phosphorus Content (kg/ha)', 'Potassium Content (kg/ha)',
                                           ]])
soil_data[['pH Level', 'Organic Matter (%)', 'Nitrogen Content (kg/ha)',
    'Phosphorus Content (kg/ha)', 'Potassium Content (kg/ha)',
    ]] = scaled_features

from sklearn.model_selection import train_test_split

X = soil_data.drop('Organic Matter (%)', axis=1)
y = soil_data['Organic Matter (%)']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

from sklearn.preprocessing import StandardScaler

scaler_1 = StandardScaler()
scaled_features = scaler.fit_transform(soil_data[['Soil Type']])
soil_data[['Soil Type']] = scaled_features

soil_data.head()

soil_data.describe()

soil_data.info()

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error


model_1 = LinearRegression()
model_1.fit(X_train, y_train)

y_pred = model_1.predict(X_test)

mse = mean_squared_error(y_test, y_pred)
print("Mean Squared Error:", mse)

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import mean_squared_error


model_2 = DecisionTreeRegressor(random_state=42)
model_2.fit(X_train, y_train)

y_pred = model_2.predict(X_test)

# Evaluate the model using Mean Squared Error (MSE)
mse = mean_squared_error(y_test, y_pred)
print("Mean Squared Error:", mse)

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error

model_3 = RandomForestRegressor(n_estimators=100, random_state=42)
model_3.fit(X_train, y_train)


y_pred = model_3.predict(X_test)

mse = mean_squared_error(y_test, y_pred)
print("Mean Squared Error:", mse)

water_data.head()

water_data=water_data.drop('District', axis=1)

water_data.info()

water_data["Irrigation Method"].value_counts()

from sklearn.preprocessing import LabelEncoder

label_encoder_water = LabelEncoder()
water_data['Crop'] = label_encoder_water.fit_transform(water_data['Crop'])



label_encoder_water_for_irr = LabelEncoder()
water_data['Irrigation Method'] = label_encoder_water_for_irr.fit_transform(water_data['Irrigation Method'])

from sklearn.preprocessing import MinMaxScaler

scaler = MinMaxScaler()
scaled_features = scaler.fit_transform(water_data[[ 'Water Availability (liters/hectare)']])
water_data[[
  'Water Availability (liters/hectare)']] = scaled_features

scaler_1 = MinMaxScaler()
scaled_features = scaler.fit_transform(water_data[[ 'Water Consumption (liters/hectare)']])
water_data[[
    'Water Consumption (liters/hectare)']] = scaled_features



from sklearn.model_selection import train_test_split

X = water_data.drop('Water Consumption (liters/hectare)', axis=1)
y = water_data['Water Consumption (liters/hectare)']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

from sklearn.feature_selection import SelectKBest, f_regression

selector = SelectKBest(score_func=f_regression, k=3)
X_selected = selector.fit_transform(X_train, y_train)

from sklearn.preprocessing import StandardScaler

scaler_2 = StandardScaler()
scaled_features = scaler.fit_transform(water_data[['Crop','Irrigation Method']])
water_data[['Crop','Irrigation Method']] = scaled_features

water_data.head()

water_data.describe()

water_data.info()

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error


model_1 = LinearRegression()
model_1.fit(X_train, y_train)

y_pred = model_1.predict(X_test)

mse = mean_squared_error(y_test, y_pred)
print("Mean Squared Error:", mse)

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import mean_squared_error


model_2 = DecisionTreeRegressor(random_state=42)
model_2.fit(X_train, y_train)

y_pred = model_2.predict(X_test)

# Evaluate the model using Mean Squared Error (MSE)
mse = mean_squared_error(y_test, y_pred)
print("Mean Squared Error:", mse)

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error

model_3 = RandomForestRegressor(n_estimators=100, random_state=42)
model_3.fit(X_train, y_train)


y_pred = model_3.predict(X_test)

mse = mean_squared_error(y_test, y_pred)
print("Mean Squared Error:", mse)